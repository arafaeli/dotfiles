#!/bin/bash

export VISUAL=vim
export EDITOR="$VISUAL"
THIS_FILE=${BASH_SOURCE[0]}
THIS_DIR=$(dirname $THIS_FILE)
BOOKMARKS_FILE=$THIS_DIR/bookmarks

alias dual2_monitor='xrandr --auto --output DP1-3 --right-of DP1-2'
alias dual_monitor='xrandr --auto --output eDP1 --right-of DP1-2'
alias single_monitor='xrandr --output DP1-2 --off'
alias c='xclip -selection clipboard -i'
alias v='xclip -selection clipboard -o'

cycle_monitor() {
  while true; do
    echo "Turning monitor off.."
    single_monitor
    read -p "Press any key to turn on" -N 1
    echo "Turning monitor on.."
    dual_monitor

    read -p "Okay now? (y/N)" choice
    if [[ $choice =~ (y|Y) ]]; then
      echo "GREAT SUCCESS"
      background-image
      return 0
    fi
    echo
  done
}

background-image() {
  feh --bg-scale ~/Pictures/pokemans.jpg --bg-scale ~/Pictures/pokemans.jpg
}

pip-install() {
  package=$1
  req_file=$2

  if [[ -z "$package" ]]; then
    echo "oi select a foken package m8"
    return 1
  fi

  if [[ -z "$req_file" ]]; then
    req_file='./requirements.txt'
  fi

  pip install $package && pip freeze | grep -i $package >> $req_file
  echo "Added $package to $req_file"
}

profile-reload() {
  echo 'Reloading best profile ever'
  source $THIS_FILE
}

alias profile-edit="vim $THIS_FILE"

b() {
  if [ -z $1 ]; then
    cat $BOOKMARKS_FILE
    return
  fi

  dest=$(cat $BOOKMARKS_FILE | grep "^${1}\s" | head -1 | awk '{print $2}')

  if [ ! -z $dest ]; then
    cd $(eval "echo $dest")
  else
    echo "${1} bookmark not found"
  fi
}

badd() {
  if [ -z $1 ]; then
    echo 'usage: badd BOOKMARK_NAME'
    return
  fi

  echo $1 $(pwd) >> $BOOKMARKS_FILE
  echo "Added $1 ($(pwd)) to bookmarks"
}

_b_complete() {
  local cur_word prev_word type_list

  cur_word="${COMP_WORDS[COMP_CWORD]}"
  prev_word="${COMP_WORDS[COMP_CWORD-1]}"

  bookmark_list=$(cat $BOOKMARKS_FILE | awk '{print $1}')

  if (( $COMP_CWORD == 1 )); then
    COMPREPLY=( $(compgen -W "${bookmark_list}" -- ${cur_word}) )
  else
    COMPREPLY=()
  fi

  return 0
}

# register
complete -F _b_complete b

# Disable ctrl-s/ctrl-q (XON/XOFF)
stty -ixon

# Copypasta
copypasta() {
  cat ~/.copypasta | grep $1 | awk '{print $2}'
}

scratch() {
  if [[ -z "$1" ]]; then
    filename=$(date +%Y-%m-%d)
  else
    filename=$1
  fi

  vim ~/.scratch/$filename
}

ec2-ssh() {
  pem=$HOME/.ssh/Poutine.pem
  host=$1
  ip=$(ec2-ls | grep $host | tail -1 | awk '{print $3}')

  ssh -i $pem ubuntu@$ip
}

_ec2-ssh_complete() {
  local cur_word prev_word type_list

  cur_word="${COMP_WORDS[COMP_CWORD]}"
  prev_word="${COMP_WORDS[COMP_CWORD-1]}"

  word_list=$(ec2-ls | awk '{print $2}')

  if (( $COMP_CWORD == 1 )); then
    COMPREPLY=( $(compgen -W "${word_list}" -- ${cur_word}) )
  else
    COMPREPLY=()
  fi

  return 0
}
complete -F _ec2-ssh_complete ec2-ssh

ec2-ls() {
  aws ec2 describe-instances | \
    jq -r '.Reservations[] | .Instances[] |
    "\(.InstanceId)\t\(.Tags[0].Value)\t\(.PublicIpAddress)"'
}

ec2-ip() {
  ec2-ls | grep $1 | tail -1 | awk '{print $3}'
}

ec2-rsync-send() {
  rsync -Pav -e "ssh -i $HOME/.ssh/Poutine.pem" $1 ubuntu@$(ec2-ip $2):$3
}

ec2-rsync-recv() {
  rsync -Pav -e "ssh -i $HOME/.ssh/Poutine.pem" ubuntu@$(ec2-ip $1):$2 $3
}

